{"version":3,"sources":["useAccordionHeader.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, isResolvedShorthand, useEventCallback, slot } from '@fluentui/react-utilities';\nimport { ARIAButtonSlotProps, useARIAButtonShorthand } from '@fluentui/react-aria';\nimport type { AccordionHeaderProps, AccordionHeaderState } from './AccordionHeader.types';\nimport { useAccordionContext_unstable } from '../../contexts/accordion';\nimport { ChevronRightRegular } from '@fluentui/react-icons';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useAccordionItemContext_unstable } from '../../contexts/accordionItem';\n\n/**\n * Returns the props and state required to render the component\n * @param props - AccordionHeader properties\n * @param ref - reference to root HTMLElement of AccordionHeader\n */\nexport const useAccordionHeader_unstable = (\n  props: AccordionHeaderProps,\n  ref: React.Ref<HTMLElement>,\n): AccordionHeaderState => {\n  const { icon, button, expandIcon, inline = false, size = 'medium', expandIconPosition = 'start' } = props;\n  const { value, disabled, open } = useAccordionItemContext_unstable();\n  const requestToggle = useAccordionContext_unstable(ctx => ctx.requestToggle);\n\n  /**\n   * force disabled state on button if accordion isn't collapsible\n   * and this is the only item opened\n   */\n  const disabledFocusable = useAccordionContext_unstable(ctx => !ctx.collapsible && ctx.openItems.length === 1 && open);\n\n  const { dir } = useFluent();\n\n  // Calculate how to rotate the expand icon [>] (ChevronRightRegular)\n  let expandIconRotation: 0 | 90 | -90 | 180;\n  if (expandIconPosition === 'end') {\n    // If expand icon is at the end, the chevron points up [^] when open, and down [v] when closed\n    expandIconRotation = open ? -90 : 90;\n  } else {\n    // Otherwise, the chevron points down [v] when open, and right [>] (or left [<] in RTL) when closed\n    expandIconRotation = open ? 90 : dir !== 'rtl' ? 0 : 180;\n  }\n\n  return {\n    disabled,\n    open,\n    size,\n    inline,\n    expandIconPosition,\n    components: {\n      root: 'div',\n      button: 'button',\n      expandIcon: 'span',\n      icon: 'div',\n    },\n    root: slot.always(\n      getIntrinsicElementProps('div', {\n        // FIXME:\n        // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n        // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n        ref: ref as React.Ref<HTMLDivElement>,\n        ...props,\n      }),\n      { elementType: 'div' },\n    ),\n    icon: slot.optional(icon, { elementType: 'div' }),\n    expandIcon: slot.optional(expandIcon, {\n      renderByDefault: true,\n      defaultProps: {\n        children: <ChevronRightRegular style={{ transform: `rotate(${expandIconRotation}deg)` }} />,\n        'aria-hidden': true,\n      },\n      elementType: 'span',\n    }),\n    button: slot.always<ARIAButtonSlotProps<'a'>>(\n      {\n        ...useARIAButtonShorthand(button, {\n          required: true,\n          defaultProps: {\n            disabled,\n            disabledFocusable,\n            'aria-expanded': open,\n            type: 'button',\n          },\n        }),\n        onClick: useEventCallback(event => {\n          if (isResolvedShorthand(button)) {\n            button.onClick?.(event);\n          }\n          if (!event.defaultPrevented) {\n            requestToggle({ value, event });\n          }\n        }),\n      },\n      { elementType: 'button' },\n    ),\n  };\n};\n"],"names":["React","getIntrinsicElementProps","isResolvedShorthand","useEventCallback","slot","useARIAButtonShorthand","useAccordionContext_unstable","ChevronRightRegular","useFluent_unstable","useFluent","useAccordionItemContext_unstable","useAccordionHeader_unstable","props","ref","icon","button","expandIcon","inline","size","expandIconPosition","value","disabled","open","requestToggle","ctx","disabledFocusable","collapsible","openItems","length","dir","expandIconRotation","components","root","always","elementType","optional","renderByDefault","defaultProps","children","style","transform","required","type","onClick","event","defaultPrevented"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,wBAAwB,EAAEC,mBAAmB,EAAEC,gBAAgB,EAAEC,IAAI,QAAQ,4BAA4B;AAClH,SAA8BC,sBAAsB,QAAQ,uBAAuB;AAEnF,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAASC,mBAAmB,QAAQ,wBAAwB;AAC5D,SAASC,sBAAsBC,SAAS,QAAQ,kCAAkC;AAClF,SAASC,gCAAgC,QAAQ,+BAA+B;AAEhF;;;;CAIC,GACD,OAAO,MAAMC,8BAA8B,CACzCC,OACAC;IAEA,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,UAAU,EAAEC,SAAS,KAAK,EAAEC,OAAO,QAAQ,EAAEC,qBAAqB,OAAO,EAAE,GAAGP;IACpG,MAAM,EAAEQ,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAE,GAAGZ;IAClC,MAAMa,gBAAgBjB,6BAA6BkB,CAAAA,MAAOA,IAAID,aAAa;IAE3E;;;GAGC,GACD,MAAME,oBAAoBnB,6BAA6BkB,CAAAA,MAAO,CAACA,IAAIE,WAAW,IAAIF,IAAIG,SAAS,CAACC,MAAM,KAAK,KAAKN;IAEhH,MAAM,EAAEO,GAAG,EAAE,GAAGpB;IAEhB,oEAAoE;IACpE,IAAIqB;IACJ,IAAIX,uBAAuB,OAAO;QAChC,8FAA8F;QAC9FW,qBAAqBR,OAAO,CAAC,KAAK;IACpC,OAAO;QACL,mGAAmG;QACnGQ,qBAAqBR,OAAO,KAAKO,QAAQ,QAAQ,IAAI;IACvD;IAEA,OAAO;QACLR;QACAC;QACAJ;QACAD;QACAE;QACAY,YAAY;YACVC,MAAM;YACNjB,QAAQ;YACRC,YAAY;YACZF,MAAM;QACR;QACAkB,MAAM5B,KAAK6B,MAAM,CACfhC,yBAAyB,OAAO;YAC9B,SAAS;YACT,4EAA4E;YAC5E,4FAA4F;YAC5FY,KAAKA;YACL,GAAGD,KAAK;QACV,IACA;YAAEsB,aAAa;QAAM;QAEvBpB,MAAMV,KAAK+B,QAAQ,CAACrB,MAAM;YAAEoB,aAAa;QAAM;QAC/ClB,YAAYZ,KAAK+B,QAAQ,CAACnB,YAAY;YACpCoB,iBAAiB;YACjBC,cAAc;gBACZC,wBAAU,oBAAC/B;oBAAoBgC,OAAO;wBAAEC,WAAW,CAAC,OAAO,EAAEV,mBAAmB,IAAI,CAAC;oBAAC;;gBACtF,eAAe;YACjB;YACAI,aAAa;QACf;QACAnB,QAAQX,KAAK6B,MAAM,CACjB;YACE,GAAG5B,uBAAuBU,QAAQ;gBAChC0B,UAAU;gBACVJ,cAAc;oBACZhB;oBACAI;oBACA,iBAAiBH;oBACjBoB,MAAM;gBACR;YACF,EAAE;YACFC,SAASxC,iBAAiByC,CAAAA;gBACxB,IAAI1C,oBAAoBa,SAAS;wBAC/BA;qBAAAA,kBAAAA,OAAO4B,OAAO,cAAd5B,sCAAAA,qBAAAA,QAAiB6B;gBACnB;gBACA,IAAI,CAACA,MAAMC,gBAAgB,EAAE;oBAC3BtB,cAAc;wBAAEH;wBAAOwB;oBAAM;gBAC/B;YACF;QACF,GACA;YAAEV,aAAa;QAAS;IAE5B;AACF,EAAE"}