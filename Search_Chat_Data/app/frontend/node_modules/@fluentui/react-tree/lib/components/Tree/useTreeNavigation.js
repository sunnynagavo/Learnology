import { nextTypeAheadElement } from '../../utils/nextTypeAheadElement';
import { treeDataTypes } from '../../utils/tokens';
import { treeItemFilter } from '../../utils/treeItemFilter';
import { useRovingTabIndex } from '../../hooks/useRovingTabIndexes';
export function useTreeNavigation() {
    const { rove, initialize } = useRovingTabIndex(treeItemFilter);
    const getNextElement = (data, treeItemWalker)=>{
        switch(data.type){
            case treeDataTypes.Click:
                return data.target;
            case treeDataTypes.TypeAhead:
                treeItemWalker.currentElement = data.target;
                return nextTypeAheadElement(treeItemWalker, data.event.key);
            case treeDataTypes.ArrowLeft:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.parentElement();
            case treeDataTypes.ArrowRight:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.firstChild();
            case treeDataTypes.End:
                treeItemWalker.currentElement = treeItemWalker.root;
                return lastChildRecursive(treeItemWalker);
            case treeDataTypes.Home:
                treeItemWalker.currentElement = treeItemWalker.root;
                return treeItemWalker.firstChild();
            case treeDataTypes.ArrowDown:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.nextElement();
            case treeDataTypes.ArrowUp:
                treeItemWalker.currentElement = data.target;
                return treeItemWalker.previousElement();
        }
    };
    function navigate(data, walker) {
        const nextElement = getNextElement(data, walker);
        if (nextElement) {
            rove(nextElement);
        }
    }
    return {
        navigate,
        initialize
    };
}
function lastChildRecursive(walker) {
    let lastElement = null;
    let nextElement = null;
    while(nextElement = walker.lastChild()){
        lastElement = nextElement;
    }
    return lastElement;
}
