import * as React from 'react';
import { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';
import { isHTMLElement, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';
export function useOptionWalker(options) {
    const { matchOption } = options;
    const { targetDocument } = useFluent();
    const treeWalkerRef = React.useRef(null);
    const listboxRef = React.useRef(null);
    const optionFilter = React.useCallback((node)=>{
        if (isHTMLElement(node) && matchOption(node)) {
            return NodeFilter.FILTER_ACCEPT;
        }
        return NodeFilter.FILTER_SKIP;
    }, [
        matchOption
    ]);
    useIsomorphicLayoutEffect(()=>{
        if (!targetDocument || !listboxRef.current) {
            return;
        }
        treeWalkerRef.current = targetDocument.createTreeWalker(listboxRef.current, NodeFilter.SHOW_ELEMENT, optionFilter);
    }, [
        targetDocument,
        optionFilter
    ]);
    const optionWalker = React.useMemo(()=>({
            first: ()=>{
                if (!treeWalkerRef.current) {
                    return null;
                }
                return treeWalkerRef.current.firstChild();
            },
            next: ()=>{
                if (!treeWalkerRef.current) {
                    return null;
                }
                return treeWalkerRef.current.nextNode();
            },
            prev: ()=>{
                if (!treeWalkerRef.current) {
                    return null;
                }
                return treeWalkerRef.current.previousNode();
            },
            setCurrent: (el)=>{
                if (!treeWalkerRef.current) {
                    return;
                }
                treeWalkerRef.current.currentNode = el;
            }
        }), []);
    return {
        optionWalker,
        listboxRef
    };
}
