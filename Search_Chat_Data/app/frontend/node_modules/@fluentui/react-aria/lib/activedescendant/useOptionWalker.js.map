{"version":3,"sources":["useOptionWalker.ts"],"sourcesContent":["import * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { isHTMLElement, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\n\ninterface UseOptionWalkerOptions {\n  matchOption: (el: HTMLElement) => boolean;\n}\n\nexport function useOptionWalker<TListboxElement extends HTMLElement>(options: UseOptionWalkerOptions) {\n  const { matchOption } = options;\n  const { targetDocument } = useFluent();\n  const treeWalkerRef = React.useRef<TreeWalker | null>(null);\n  const listboxRef = React.useRef<TListboxElement | null>(null);\n\n  const optionFilter = React.useCallback(\n    (node: Node) => {\n      if (isHTMLElement(node) && matchOption(node)) {\n        return NodeFilter.FILTER_ACCEPT;\n      }\n\n      return NodeFilter.FILTER_SKIP;\n    },\n    [matchOption],\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (!targetDocument || !listboxRef.current) {\n      return;\n    }\n\n    treeWalkerRef.current = targetDocument.createTreeWalker(listboxRef.current, NodeFilter.SHOW_ELEMENT, optionFilter);\n  }, [targetDocument, optionFilter]);\n\n  const optionWalker = React.useMemo(\n    () => ({\n      first: () => {\n        if (!treeWalkerRef.current) {\n          return null;\n        }\n\n        return treeWalkerRef.current.firstChild() as HTMLElement | null;\n      },\n      next: () => {\n        if (!treeWalkerRef.current) {\n          return null;\n        }\n\n        return treeWalkerRef.current.nextNode() as HTMLElement | null;\n      },\n      prev: () => {\n        if (!treeWalkerRef.current) {\n          return null;\n        }\n\n        return treeWalkerRef.current.previousNode() as HTMLElement | null;\n      },\n      setCurrent: (el: HTMLElement) => {\n        if (!treeWalkerRef.current) {\n          return;\n        }\n\n        treeWalkerRef.current.currentNode = el;\n      },\n    }),\n    [],\n  );\n\n  return {\n    optionWalker,\n    listboxRef,\n  };\n}\n"],"names":["React","useFluent_unstable","useFluent","isHTMLElement","useIsomorphicLayoutEffect","useOptionWalker","options","matchOption","targetDocument","treeWalkerRef","useRef","listboxRef","optionFilter","useCallback","node","NodeFilter","FILTER_ACCEPT","FILTER_SKIP","current","createTreeWalker","SHOW_ELEMENT","optionWalker","useMemo","first","firstChild","next","nextNode","prev","previousNode","setCurrent","el","currentNode"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,sBAAsBC,SAAS,QAAQ,kCAAkC;AAClF,SAASC,aAAa,EAAEC,yBAAyB,QAAQ,4BAA4B;AAMrF,OAAO,SAASC,gBAAqDC,OAA+B;IAClG,MAAM,EAAEC,WAAW,EAAE,GAAGD;IACxB,MAAM,EAAEE,cAAc,EAAE,GAAGN;IAC3B,MAAMO,gBAAgBT,MAAMU,MAAM,CAAoB;IACtD,MAAMC,aAAaX,MAAMU,MAAM,CAAyB;IAExD,MAAME,eAAeZ,MAAMa,WAAW,CACpC,CAACC;QACC,IAAIX,cAAcW,SAASP,YAAYO,OAAO;YAC5C,OAAOC,WAAWC,aAAa;QACjC;QAEA,OAAOD,WAAWE,WAAW;IAC/B,GACA;QAACV;KAAY;IAGfH,0BAA0B;QACxB,IAAI,CAACI,kBAAkB,CAACG,WAAWO,OAAO,EAAE;YAC1C;QACF;QAEAT,cAAcS,OAAO,GAAGV,eAAeW,gBAAgB,CAACR,WAAWO,OAAO,EAAEH,WAAWK,YAAY,EAAER;IACvG,GAAG;QAACJ;QAAgBI;KAAa;IAEjC,MAAMS,eAAerB,MAAMsB,OAAO,CAChC,IAAO,CAAA;YACLC,OAAO;gBACL,IAAI,CAACd,cAAcS,OAAO,EAAE;oBAC1B,OAAO;gBACT;gBAEA,OAAOT,cAAcS,OAAO,CAACM,UAAU;YACzC;YACAC,MAAM;gBACJ,IAAI,CAAChB,cAAcS,OAAO,EAAE;oBAC1B,OAAO;gBACT;gBAEA,OAAOT,cAAcS,OAAO,CAACQ,QAAQ;YACvC;YACAC,MAAM;gBACJ,IAAI,CAAClB,cAAcS,OAAO,EAAE;oBAC1B,OAAO;gBACT;gBAEA,OAAOT,cAAcS,OAAO,CAACU,YAAY;YAC3C;YACAC,YAAY,CAACC;gBACX,IAAI,CAACrB,cAAcS,OAAO,EAAE;oBAC1B;gBACF;gBAEAT,cAAcS,OAAO,CAACa,WAAW,GAAGD;YACtC;QACF,CAAA,GACA,EAAE;IAGJ,OAAO;QACLT;QACAV;IACF;AACF"}