const s = "__FUIDT_CONTROLLER__", i = "__FUIDT_ELEMENT_METADATA__", a = "__FUIDT_HTML_ELEMENT_REFERENCE__", c = (e) => !!(e && i in e && e.parentElement !== null), d = () => {
  let e = null;
  const n = new MutationObserver((r) => {
    if (e)
      for (const t of r)
        t.type === "childList" && Array.from(t.removedNodes).includes(e) && o.withdraw();
  }), o = {
    get selectedElement() {
      return e;
    },
    select: (r) => (c(r) && (e = r, n.observe(r.parentElement, { childList: !0, subtree: !1 })), e && r && f(e, r) || o.withdraw(), e),
    withdraw: () => {
      e = null, n.disconnect();
    }
  };
  return o;
}, l = (e) => {
  e.defaultView && (e.defaultView[s] || (e.defaultView[s] = d()));
};
function f(e, n) {
  const o = e[i];
  switch (o.type) {
    case "middleware":
      return o.references.has(n);
    default:
      return !1;
  }
}
function u(e, n) {
  var o;
  const r = e;
  var t;
  return !!(!(r == null || (o = r.ownerDocument) === null || o === void 0) && o.defaultView && r instanceof r.ownerDocument.defaultView[(t = n == null ? void 0 : n.constructorName) !== null && t !== void 0 ? t : "HTMLElement"]);
}
function E() {
  return `${a}:${crypto.randomUUID()}`;
}
function _() {
  const e = /* @__PURE__ */ new WeakSet(), n = /* @__PURE__ */ new Map();
  return {
    add(r) {
      const t = E();
      return n.set(t, r), e.add(r), t;
    },
    get(r) {
      const t = n.get(r);
      if (t && e.has(t))
        return t;
    },
    has(r) {
      return e.has(r);
    }
  };
}
const w = (e) => {
  const n = _();
  return [JSON.parse(
    JSON.stringify(e, (r, t) => u(t) ? n.add(t) : typeof t == "object" && t && Object.getPrototypeOf(t) !== Object.prototype && Object.getPrototypeOf(t) !== Array.prototype ? "toString" in t ? t.toString() : void 0 : t)
  ), n];
}, m = (e, n = p) => ({
  name: "floating-ui-devtools",
  fn: (o) => {
    l(e);
    const [r, t] = w(n(o));
    return Object.assign(o.elements.floating, {
      [i]: { references: t, serializedData: r, type: "middleware" }
    }), {};
  }
}), p = (e) => ({
  ...e,
  type: "FloatingUIMiddleware"
});
export {
  m as middleware
};
